<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <!-- Tell browsers not to scale the viewport automatically -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Tetris Rush</title>
    <link rel="icon" href="favicon.ico" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN"
      crossorigin="anonymous"
    />

    <link rel="stylesheet" href="main.css" />
  </head>
  <body
    class="min-vh-100 d-flex flex-column justify-content-between align-items-center bg-light"
  >
    <!-- Use header, main, and footer elements to give semantic structure -->
    <header class="w-100">
      <nav class="navbar navbar-expand-lg bg-light">
        <div class="container-fluid">
          <a class="navbar-brand" href="/">Tetris Rush</a>
          <button
            class="navbar-toggler"
            type="button"
            data-bs-toggle="collapse"
            data-bs-target="#navbarSupportedContent"
            aria-controls="navbarSupportedContent"
            aria-expanded="false"
            aria-label="Toggle navigation"
          >
            <span class="navbar-toggler-icon"></span>
          </button>

          <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
              <li class="nav-item">
                <a href="index.html" class="nav-link">Home</a>
              </li>
              <li class="nav-item">
                <a href="play.html" class="nav-link">Play</a>
              </li>
              <li class="nav-item">
                <a href="scores.html" class="nav-link">Scores</a>
              </li>
              <li class="nav-item">
                <a href="about.html" class="nav-link">About</a>
              </li>
            </ul>
            <div class="d-flex justify-content-around gap-3 align-items-center">
              <div class="text-body-secondary">Current User</div>
              <button type="button" class="btn btn-primary">Logout</button>
            </div>
          </div>
        </div>
      </nav>
    </header>

    <main
      class="container-fluid h-100 flex-grow-1 d-flex flex-column justify-content-center align-items-center gx-0"
    >
      <!-- Canvas will be inflated with JS later on, for the main game loop -->
      <canvas id="game-canvas" class="w-100 h-100 d-block flex-grow-1"></canvas>
      <script>
        // Get the canvas element from the DOM
        const canvas = document.getElementById("game-canvas");
        // Get the canvas context
        const ctx = canvas.getContext("2d");
        const observer = new ResizeObserver((entries) => {
          canvas.width = canvas.clientWidth;
          canvas.height = canvas.clientHeight;
        });
        observer.observe(canvas);

        let frameCount = 0;
        let playerScore = 0;

        // Dummy player data
        const currentUser = { name: "Player 1", score: 100 };
        let currentBlock = { x: 0, y: 0, color: "pink", width: 50, height: 50 };
        // Dummy next block data
        const nextBlock = { color: "blue", width: 50, height: 50 };

        // Dummy player data
        const players = [
          { name: "Player 1", score: 100 },
          { name: "Player 2", score: 75 },
          { name: "Player 3", score: 50 },
        ];

        function generateSequence() {
          const sequence = ["I", "J", "L", "O", "S", "T", "Z"];

          while (sequence.length) {
            const rand = Math.floor(Math.random() * sequence.length);
            const name = sequence.splice(rand, 1)[0];
            console.log(name);
          }
        }

        function updateGame() {
          // Update game logic here

          // For demonstration purposes, let's move the current block down
          currentBlock.y += 1;

          // Update the score (increment for simplicity)
          playerScore += 1;

          const centerWidth = (canvas.width * 3) / 5;
          const centerStart = canvas.width / 5;
          const centerEnd = centerStart + centerWidth;

          // If the block is outside either side, put it to that side
          if (currentBlock.x < centerStart) {
            currentBlock.x = centerStart;
          } else if (currentBlock.x > centerEnd - currentBlock.width) {
            currentBlock.x = centerEnd - currentBlock.width;
          }

          if (currentBlock.y > canvas.height - currentBlock.height) {
            // Reset the block to the top of the screen
            currentBlock.y = canvas.height - currentBlock.height;
          }
        }

        function drawPlayerList() {
          // Draw player list on the left side
          ctx.fillStyle = "#333"; // Background color
          ctx.fillRect(10, 10, 180, canvas.height - 20); // Draw a background rectangle

          ctx.fillStyle = "white";
          ctx.font = "18px Arial";

          for (let i = 0; i < players.length; i++) {
            const player = players[i];
            const lineHeight = 30;
            const startY = 40 + i * lineHeight;

            ctx.fillText(`${player.name}: ${player.score}`, 20, startY);
          }
        }

        function drawUserInfo() {
          // Draw user info on the right side
          ctx.fillStyle = "#333"; // Background color
          ctx.fillRect(canvas.width - 200, 10, 190, 100); // Draw a background rectangle

          ctx.fillStyle = "white";
          ctx.font = "18px Arial";

          // Display current user's name and score
          ctx.fillText(`Name: ${currentUser.name}`, canvas.width - 190, 40);
          ctx.fillText(`Score: ${currentUser.score}`, canvas.width - 190, 70);

          // Display box with the next block
          ctx.fillStyle = nextBlock.color;
          ctx.fillRect(
            canvas.width - 190,
            80,
            nextBlock.width,
            nextBlock.height
          );
        }

        function render() {
          // Clear the canvas
          ctx.clearRect(0, 0, canvas.width, canvas.height);

          // Calculate the widths for the three parts
          const sideWidth = canvas.width / 5;
          const centerWidth = (canvas.width * 3) / 5;

          // Draw the left side
          ctx.fillStyle = "green";
          ctx.fillRect(0, 0, sideWidth, canvas.height);

          // Draw the center game playing area
          ctx.fillStyle = "blue";
          ctx.fillRect(sideWidth, 0, centerWidth, canvas.height);

          // Draw the right side
          ctx.fillStyle = "green";
          ctx.fillRect(sideWidth + centerWidth, 0, sideWidth, canvas.height);

          // Draw the current block
          ctx.fillStyle = currentBlock.color;
          ctx.fillRect(
            currentBlock.x,
            currentBlock.y,
            currentBlock.width,
            currentBlock.height
          );

          // Call the update function to modify game-related variables
          updateGame();
          drawPlayerList();
          drawUserInfo();

          // Increment the frame count
          frameCount++;

          // Request the next animation frame
          requestAnimationFrame(render);
        }

        // Start the game loop
        render();

        // Add event listeners for key presses
        document.addEventListener("keydown", (event) => {
          // Move the block left
          if (event.code === "ArrowLeft") {
            currentBlock.x -= 50;
          }

          // Move the block right
          if (event.code === "ArrowRight") {
            currentBlock.x += 50;
          }

          // Move the block up
          if (event.code === "ArrowUp") {
            currentBlock.y -= 50;
          }

          // Move the block down
          if (event.code === "ArrowDown") {
            currentBlock.y += 50;
          }
        });
      </script>
    </main>

    <footer
      class="container-fluid bg-dark text-light d-flex flex-column justify-content-center align-items-center text-light py-2"
    >
      <div>&copy;Ben Tessem</div>
      <a
        href="https://github.com/benjamin-tessem/startup"
        class="text-decoration-none text-light"
        >GitHub</a
      >
    </footer>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
      crossorigin="anonymous"
    ></script>

    <script
      src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
      integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js"
      integrity="sha384-BBtl+eGJRgqQAUMxJ7pMwbEyER4l1g+O15P+16Ep7Q9Q+zqX6gSbd85u4mG4QzX+"
      crossorigin="anonymous"
    ></script>
  </body>
</html>
